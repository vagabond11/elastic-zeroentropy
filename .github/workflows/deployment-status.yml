name: Deployment Status Check

on:
  workflow_run:
    workflows: ["Publish to PyPI"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deployment-status:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
        twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/elastic_zeroentropy-*.whl
        python -c "import elastic_zeroentropy; print(f'‚úÖ Package installed successfully. Version: {elastic_zeroentropy.__version__}')"
    
    - name: Check PyPI availability
      run: |
        pip install requests
        python -c "
        import requests
        try:
            response = requests.get('https://pypi.org/pypi/elastic-zeroentropy/json')
            if response.status_code == 200:
                data = response.json()
                latest_version = data['info']['version']
                print(f'‚úÖ Package available on PyPI. Latest version: {latest_version}')
            else:
                print('‚ö†Ô∏è Package not found on PyPI')
        except Exception as e:
            print(f'‚ùå Error checking PyPI: {e}')
        "
    
    - name: Create deployment status comment
      if: github.event.workflow_run.conclusion == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Deployment Status')
          );
          
          const statusComment = `## üöÄ Deployment Status: SUCCESS ‚úÖ
          
          **Package**: elastic-zeroentropy
          **Version**: ${process.env.VERSION || 'latest'}
          **Status**: Successfully deployed
          
          ### What was deployed:
          - ‚úÖ Package built successfully
          - ‚úÖ Package installed and tested
          - ‚úÖ PyPI availability confirmed
          
          ### Next steps:
          - Package is ready for use: \`pip install elastic-zeroentropy\`
          - Documentation available at: https://github.com/vagabond11/elastic-zeroentropy
          
          ---
          *This is an automated deployment status update*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: statusComment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: statusComment
            });
          }
    
    - name: Create failure notification
      if: github.event.workflow_run.conclusion == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const statusComment = `## üö® Deployment Status: FAILED ‚ùå
          
          **Package**: elastic-zeroentropy
          **Status**: Deployment failed
          
          ### Issues detected:
          - ‚ùå Build or deployment process failed
          - ‚ùå Please check the workflow logs for details
          
          ### Next steps:
          - Review the workflow logs: ${context.payload.workflow_run.html_url}
          - Fix any issues and retry deployment
          
          ---
          *This is an automated deployment status update*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: statusComment
          }); 