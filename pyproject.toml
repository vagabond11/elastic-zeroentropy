[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "elastic-zeroentropy"
version = "0.1.0"
description = "Turn Elasticsearch into a smart search engine in 5 minutes with ZeroEntropy's LLM-powered reranking."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    { name = "Houssam AÃ¯t", email = "houssam@example.com" },
]
keywords = ["elasticsearch", "search", "reranking", "zeroentropy", "llm", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core dependencies - minimal for basic functionality
dependencies = [
    "httpx>=0.24.0",
    "elasticsearch>=8.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "tenacity>=8.0.0",
    "python-dotenv>=1.0.0",
]

# Optional dependencies for different use cases
[project.optional-dependencies]
cli = [
    "click>=8.0.0",
    "rich>=13.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
    "httpx[testing]>=0.24.0",
]

[project.scripts]
elastic-zeroentropy = "elastic_zeroentropy.cli:main"

[project.urls]
Homepage = "https://github.com/houssamouaziz/elastic-zeroentropy-reranker"
Documentation = "https://github.com/houssamouaziz/elastic-zeroentropy-reranker#readme"
Repository = "https://github.com/houssamouaziz/elastic-zeroentropy-reranker"
Issues = "https://github.com/houssamouaziz/elastic-zeroentropy-reranker/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/elastic_zeroentropy"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/env.example",
]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["elastic_zeroentropy"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "elasticsearch.*",
    "tenacity.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=elastic_zeroentropy",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 